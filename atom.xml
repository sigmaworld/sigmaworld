<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MetIdeas</title>
  <subtitle>还 不 够 笨!</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://metideas.com/blog/"/>
  <updated>2016-06-17T05:00:26.000Z</updated>
  <id>http://metideas.com/blog/</id>
  
  <author>
    <name>Frank Lou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vim cheatsheet</title>
    <link href="http://metideas.com/blog/2016/06/17/vim-cheatsheet/"/>
    <id>http://metideas.com/blog/2016/06/17/vim-cheatsheet/</id>
    <published>2016-06-17T04:00:00.000Z</published>
    <updated>2016-06-17T05:00:26.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;&lt;p&gt;This article herein exist as a cheatsheet for Vim. The orginal article come from &lt;a href=&quot;https://gist.github.com/ldong/f05bbae89079f52cca0e&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Idong&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;h1 id=&quot;vim-shortcuts&quot;&gt;Vim shortcuts&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;zz                                       Position cursor at middle of screen&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zt                                       Position cursor at top of screen&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zb                                       Position cursor at the bottom of screen&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;H                                        Go to the Header&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M                                        Go to the Middle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;L                                        Go to the Lower&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select                                   v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select row(s)                            SHIFT + v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select blocks (columns)                  CTRL  + v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;indent selected text                     &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;unindent selected text                   &amp;lt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list buffers                             :ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;open buffer                              :bN (N = buffer number)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print                                    :hardcopy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;open a file                              :e /path/to/file.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                         :e C:\Path\To\File.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sort selected rows                       :sort&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;search for word under cursor             *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;open file under cursor                   gf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (absolute path or relative)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;format selected code                     =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select contents of entire file           ggVG&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;convert selected text to uppercase       U&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;convert selected text to lowercase       u&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;invert case of selected text             ~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;convert tabs to spaces                   :retab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start recording a macro                  qX (X = key to assign macro to)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stop recording a macro                   q&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;playback macro                           @X (X = key macro was assigned to)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;replay previously played macro *         @@&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;auto-complete a word you are typing **   CTRL + n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bookmark current place in file           mX (X = key to assign bookmark to)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jump to bookmark                         `X (X = key bookmark was assigned to&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                             ` = back tick/tilde key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;show all bookmarks                       :marks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delete a bookmark                        :delm X (X = key bookmark to delete)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delete all bookmarks                     :delm!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;split screen horizontally                :split&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;split screen vertically                  :vsplit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;navigating split screens                 CTRL + w + j = move down a screen&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                         CTRL + w + k = move up a screen&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                         CTRL + w + h = move left a screen&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                         CTRL + w + l = move right a screen&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;close all other split screens            :only&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*  - As with other commands in vi, you can playback a macro any number of times.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     The following command would playback the macro assigned to the key `w&amp;apos; 100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     times: 100@w&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;** - Vim uses words that exist in your current buffer and any other buffer you&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     may have open for auto-complete suggestions.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&quot;references&quot;&gt;References:&lt;/h1&gt;&lt;p&gt;[Vim commands you wish known earlier] (http://stackoverflow.com/questions/1276403/simple-vim-commands-you-wish-youd-known-earlier)&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.fprintf.net/vimCheatSheet.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vim cheatsheet&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://bullium.com/support/vim.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vim Commands Cheat Sheet&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://eastcoastefx.vaesite.com/vim&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A handy guide to Vim shortcuts&lt;/a&gt;&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;This article herein exist as a cheatsheet for Vim. The orginal article come from &lt;a href=&quot;https://gist.github.com/ldong/f05bbae89079f52cca0e&quot;&gt;Idong&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="vim tool" scheme="http://metideas.com/blog/tags/vim-tool/"/>
    
  </entry>
  
  <entry>
    <title>My Tools</title>
    <link href="http://metideas.com/blog/2016/06/16/My-Tool/"/>
    <id>http://metideas.com/blog/2016/06/16/My-Tool/</id>
    <published>2016-06-16T23:57:57.000Z</published>
    <updated>2016-06-17T04:59:04.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://jogjagadget.com/wp-content/uploads/2013/12/macbook-air-all-faded-and-stuff.jpg&quot; alt=&quot;My Tools&quot;&gt;&lt;/p&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Resume Review|简历修改工具: &lt;a href=&quot;https://www.jobscan.co&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jobscan&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Mac 中的 zsh 和 Oh-my-zsh 配置| &lt;a href=&quot;http://wdxtub.com/2016/02/18/oh-my-zsh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zsh 全程指南&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://jogjagadget.com/wp-content/uploads/2013/12/macbook-air-all-faded-and-stuff.jpg&quot; alt=&quot;My Tools&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="tool" scheme="http://metideas.com/blog/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程</title>
    <link href="http://metideas.com/blog/2016/06/11/functional-programming/"/>
    <id>http://metideas.com/blog/2016/06/11/functional-programming/</id>
    <published>2016-06-11T05:00:20.000Z</published>
    <updated>2016-06-11T05:49:32.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;&lt;p&gt;本文转载自&lt;a href=&quot;http://coolshell.cn/articles/10822.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;酷壳&lt;/a&gt;,作者陈皓. 关于函数式编程作者讲的很详细清楚&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;当我们说起函数式编程来说，我们会看到如下函数式编程的长相：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;函数式编程的三大特性：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;immutable data 不可变数据&lt;/strong&gt;：像Clojure一样，默认上变量是不可变的，如果你要改变变量，你需要把变量copy出去修改。这样一来，可以让你的程序少很多Bug。因为，程序中的状态不好维护，在并发的时候更不好维护。（你可以试想一下如果你的程序有个复杂的状态，当以后别人改你代码的时候，是很容易出bug的，在并行中这样的问题就更多了）&lt;/li&gt;&lt;li&gt;&lt;strong&gt;first class functions&lt;/strong&gt;：这个技术可以让你的函数就像变量一样来使用。也就是说，你的函数可以像变量一样被创建，修改，并当成变量一样传递，返回或是在函数中嵌套函数。这个有点像Javascript的Prototype（参看&lt;a href=&quot;http://coolshell.cn/articles/6668.html&quot; title=&quot;再谈javascript面向对象编程&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Javascript的面向对象编程&lt;/a&gt;）&lt;/li&gt;&lt;li&gt;&lt;strong&gt;尾递归优化&lt;/strong&gt;：我们知道递归的害处，那就是如果递归很深的话，stack受不了，并会导致性能大幅度下降。所以，我们使用尾递归优化技术——每次递归时都会重用stack，这样一来能够提升性能，当然，这需要语言或编译器的支持。Python就不支持。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;函数式编程的几个技术&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;map &amp;amp; reduce&lt;/strong&gt; ：这个技术不用多说了，函数式编程最常见的技术就是对一个集合做Map和Reduce操作。这比起过程式的语言来说，在代码上要更容易阅读。（传统过程式的语言需要使用for/while循环，然后在各种变量中把数据倒过来倒过去的）这个很像C++中的STL中的foreach，find_if，count_if之流的函数的玩法。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;pipeline&lt;/strong&gt;：这个技术的意思是，把函数实例成一个一个的action，然后，把一组action放到一个数组或是列表中，然后把数据传给这个action list，数据就像一个pipeline一样顺序地被各个函数所操作，最终得到我们想要的结果。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;recursing 递归&lt;/strong&gt; ：递归最大的好处就简化代码，他可以把一个复杂的问题用很简单的代码描述出来。注意：递归的精髓是描述问题，而这正是函数式编程的精髓。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;currying&lt;/strong&gt;：把一个函数的多个参数分解成多个函数， 然后把函数多层封装起来，每层函数都返回一个函数去接收下一个参数这样，可以简化函数的多个参数。在C++中，这个很像STL中的bind_1st或是bind2nd。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;higher order function 高阶函数&lt;/strong&gt;：所谓高阶函数就是函数当参数，把传入的函数做一个封装，然后返回这个封装函数。现象上就是函数传进传出，就像面向对象对象满天飞一样。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;还有函数式的一些好处&lt;/p&gt;&lt;ul&gt;&lt;li&gt;**parallelization 并行：**所谓并行的意思就是在并行环境下，各个线程之间不需要同步或互斥。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;lazy evaluation 惰性求值&lt;/strong&gt;：这个需要编译器的支持。表达式不在它被绑定到变量之后就立即求值，而是在该值被取用的时候求值，也就是说，语句如_x:=expression;_ (把一个表达式的结果赋值给一个变量)明显的调用这个表达式被计算并把结果放置到 &lt;em&gt;x&lt;/em&gt; 中，但是先不管实际在 &lt;em&gt;x&lt;/em&gt; 中的是什么，直到通过后面的表达式中到 &lt;em&gt;x&lt;/em&gt; 的引用而有了对它的值的需求的时候，而后面表达式自身的求值也可以被延迟，最终为了生成让外界看到的某个符号而计算这个快速增长的依赖树。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;determinism 确定性&lt;/strong&gt;：所谓确定性的意思就是像数学那样 f(x) = y ，这个函数无论在什么场景下，都会得到同样的结果，这个我们称之为函数的确定性。而不是像程序中的很多函数那样，同一个参数，却会在不同的场景下计算出不同的结果。所谓不同的场景的意思就是我们的函数会根据一些运行中的状态信息的不同而发生变化。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;p&gt;上面的那些东西太抽象了，还是让我们来循序渐近地看一些例子吧。&lt;/p&gt;&lt;p&gt;我们先用一个最简单的例子来说明一下什么是函数式编程。&lt;/p&gt;&lt;p&gt;先看一个非函数式的例子：&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int cnt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void increment()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     cnt++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;那么，函数式的应该怎么写呢？&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int increment( int cnt)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cnt+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;你可能会觉得这个例子太普通了。是的，这个例子就是函数式编程的准则：&lt;strong&gt;不依赖于外部的数据，而且也不改变外部数据的值，而是返回一个新的值给你&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;我们再来看一个简单例子：&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;incx&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(y)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; incx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inc2 = inc( &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inc5 = inc( &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; inc2( &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; ) &lt;span class=&quot;comment&quot;&gt;# 输出 7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; inc5( &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; ) &lt;span class=&quot;comment&quot;&gt;# 输出 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;我们可以看到上面那个例子inc()函数返回了另一个函数incx()，于是我们可以用inc()函数来构造各种版本的inc函数，比如：inc2()和inc5()。这个技术其实就是上面所说的Currying技术。从这个技术上，你可能体会到函数式编程的理念：&lt;strong&gt;把函数当成变量来用，关注于描述问题而不是怎么实现&lt;/strong&gt;，这样可以让代码更易读。&lt;/p&gt;&lt;h4 id=&quot;map-reduce&quot;&gt;Map &amp;amp; Reduce&lt;/h4&gt;&lt;p&gt;在函数式编程中，我们不应该用循环迭代的方式，我们应该用更为高级的方法，如下所示的Python代码&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;name_len = map ( len , [ &lt;span class=&quot;string&quot;&gt;&quot;hao&quot;&lt;/span&gt; , &lt;span class=&quot;string&quot;&gt;&quot;chen&quot;&lt;/span&gt; , &lt;span class=&quot;string&quot;&gt;&quot;coolshell&quot;&lt;/span&gt; ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; name_len&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# 输出 [3, 4, 9]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;你可以看到这样的代码很易读，因为，&lt;strong&gt;这样的代码是在描述要干什么，而不是怎么干&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;我们再来看一个Python代码的例子：&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;toUpper&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(item)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; item.upper()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;upper_name = map (toUpper, [ &lt;span class=&quot;string&quot;&gt;&quot;hao&quot;&lt;/span&gt; , &lt;span class=&quot;string&quot;&gt;&quot;chen&quot;&lt;/span&gt; , &lt;span class=&quot;string&quot;&gt;&quot;coolshell&quot;&lt;/span&gt; ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; upper_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 输出 [&#39;HAO&#39;, &#39;CHEN&#39;, &#39;COOLSHELL&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;顺便说一下，上面的例子个是不是和我们的STL的transform有些像？&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   string s= &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   string out;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   transform(s.begin(), s.end(), back_inserter(out), :: toupper );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   cout &amp;lt;&amp;lt; out &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // 输出：HELLO&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在上面Python的那个例子中我们可以看到，我们写义了一个函数toUpper，这个函数没有改变传进来的值，只是把传进来的值做个简单的操作，然后返回。然后，我们把其用在map函数中，就可以很清楚地描述出我们想要干什么。而不会去理解一个在循环中的怎么实现的代码，最终在读了很多循环的逻辑后才发现原来是这个或那个意思。 下面，我们看看描述实现方法的过程式编程是怎么玩的（看上去是不是不如函数式的清晰？）：&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;upname = [ &lt;span class=&quot;string&quot;&gt;&#39;HAO&#39;&lt;/span&gt; , &lt;span class=&quot;string&quot;&gt;&#39;CHEN&#39;&lt;/span&gt; , &lt;span class=&quot;string&quot;&gt;&#39;COOLSHELL&#39;&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lowname = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range ( len (upname)):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     lowname.append( upname[i].lower() )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;对于map我们别忘了lambda表达式：你可以简单地理解为这是一个inline的匿名函数。下面的lambda表达式相当于：def func(x): return x*x&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;squares = map ( &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: x * x, range ( &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; ))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; squares&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 输出 [0, 1, 4, 9, 16, 25, 36, 49, 64]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;我们再来看看reduce怎么玩？（下面的lambda表达式中有两个参数，也就是说每次从列表中取两个值，计算结果后把这个值再放回去，下面的表达式相当于：((((1+2)+3)+4)+5) ）&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; reduce ( &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x, y: x + y, [ &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# 输出 15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Python中的除了map和reduce外，还有一些别的如filter, find, all, any的函数做辅助（其它函数式的语言也有），可以让你的代码更简洁，更易读。 我们再来看一个比较复杂的例子：&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;num = [ &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; , - &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; , - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; , - &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;positive_num_cnt = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;positive_num_sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range ( len (num)):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; num[i] &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         positive_num_cnt + = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         positive_num_sum + = num[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; positive_num_cnt &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     average = positive_num_sum / positive_num_cnt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; average&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 输出 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果用函数式编程，这个例子可以写成这样：&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;positive_num = filter ( &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: x&amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; , num)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;average = reduce ( &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x,y: x + y, positive_num) / len ( positive_num )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;C++11玩的法：&lt;/p&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;numeric&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt; num &amp;#123;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt; p_num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copy_if(num.begin(), num.end(), back_inserter(p_num), []( &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i)&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (i&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&amp;#125; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; average = accumulate(p_num.begin(), p_num.end(), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) / p_num.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;averge: &quot;&lt;/span&gt; &amp;lt;&amp;lt; average &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;我们可以看到，函数式编程有如下好处：&lt;/p&gt;&lt;p&gt;1）代码更简单了。 2）数据集，操作，返回值都放到了一起。 3）你在读代码的时候，没有了循环体，于是就可以少了些临时变量，以及变量倒来倒去逻辑。 4）你的代码变成了在描述你要干什么，而不是怎么去干。&lt;/p&gt;&lt;p&gt;最后，我们来看一下Map/Reduce这样的函数是怎么来实现的（下面是Javascript代码）&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; map = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;mappingFunction, list&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   forEach(list, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     result.push(mappingFunction(item));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;下面是reduce函数的javascript实现（谢谢 &lt;a href=&quot;http://weibo.com/u/1772898707&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@下雨在家&lt;/a&gt; 修正的我原来的简单版本）&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;actionFunction, list, initial&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; accumulate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (initial)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         accumulate = initial;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         accumulate = list.shfit();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     temp = list.shift();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (temp)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         accumulate = actionFunction(accumulate,temp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         temp = list.shift();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; accumulate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&quot;declarative-programming-vs-imperative-programming&quot;&gt;Declarative Programming vs Imperative Programming&lt;/h4&gt;&lt;p&gt;前面提到过多次的函数式编程关注的是：describe what to do, rather than how to do it. 于是，我们把以前的过程式的编程范式叫做 &lt;a href=&quot;http://en.wikipedia.org/wiki/Imperative_programming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Imperative Programming&lt;/a&gt; – 指令式编程，而把函数式的这种范式叫做 &lt;a href=&quot;http://en.wikipedia.org/wiki/Declarative_programming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Declarative Programming&lt;/a&gt; – 声明式编程。&lt;/p&gt;&lt;p&gt;下面我们看一下相关的示例（本示例来自&lt;a href=&quot;http://maryrosecook.com/post/a-practical-introduction-to-functional-programming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt; ）。&lt;/p&gt;&lt;p&gt;比如，我们有3辆车比赛，简单起见，我们分别给这3辆车有70%的概率可以往前走一步，一共有5次机会，我们打出每一次这3辆车的前行状态。&lt;/p&gt;&lt;p&gt;对于Imperative Programming来说，代码如下（Python）：&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; random &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; random&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; time = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; car_positions = [ &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; time:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# decrease time&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      time - = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range ( len (car_positions)):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;# move car&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; random() &amp;gt; &lt;span class=&quot;number&quot;&gt;0.3&lt;/span&gt; :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              car_positions[i] + = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;# draw car&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt; * car_positions[i]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;我们可以把这个两重循环变成一些函数模块，这样有利于我们更容易地阅读代码：&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; random &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; random&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;move_cars&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, _ &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; enumerate (car_positions):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; random() &amp;gt; &lt;span class=&quot;number&quot;&gt;0.3&lt;/span&gt; :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              car_positions[i] + = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;draw_car&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(car_position)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt; * car_position&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run_step_of_race&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      time - = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      move_cars()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; car_position &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; car_positions:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          draw_car(car_position)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; time = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; car_positions = [ &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; time:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      run_step_of_race()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      draw()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面的代码，我们可以从主循环开始，我们可以很清楚地看到程序的主干，因为我们把程序的逻辑分成了几个函数，这样一来，我们的代码逻辑也会变得几个小碎片，于是我们读代码时要考虑的上下文就少了很多，阅读代码也会更容易。不像第一个示例，如果没有注释和说明，你还是需要花些时间理解一下。&lt;strong&gt;而把代码逻辑封装成了函数后，我们就相当于给每个相对独立的程序逻辑取了个名字，于是代码成了自解释的&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;但是，你会发现，封装成函数后，这些函数都会依赖于共享的变量来同步其状态。于是，我们在读代码的过程时，每当我们进入到函数里，一量读到访问了一个外部的变量，我们马上要去查看这个变量的上下文，然后还要在大脑里推演这个变量的状态， 我们才知道程序的真正逻辑。也就是说，&lt;strong&gt;这些函数间必需知道其它函数是怎么修改它们之间的共享变量的，所以，这些函数是有状态的&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;我们知道，有状态并不是一件很好的事情，无论是对代码重用，还是对代码的并行来说，都是有副作用的。因此，我们要想个方法把这些状态搞掉，于是出现了我们的 Functional Programming 的编程范式。下面，我们来看看函数式的方式应该怎么写？&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; random &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; random&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;move_cars&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(car_positions)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; map ( &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: x + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; random() &amp;gt; &lt;span class=&quot;number&quot;&gt;0.3&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; x,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 car_positions)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;output_car&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(car_position)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt; * car_position&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run_step_of_race&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(state)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;time&#39;&lt;/span&gt; : state[ &lt;span class=&quot;string&quot;&gt;&#39;time&#39;&lt;/span&gt; ] - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;string&quot;&gt;&#39;car_positions&#39;&lt;/span&gt; : move_cars(state[ &lt;span class=&quot;string&quot;&gt;&#39;car_positions&#39;&lt;/span&gt; ])&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(state)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt; .join( map (output_car, state[ &lt;span class=&quot;string&quot;&gt;&#39;car_positions&#39;&lt;/span&gt; ]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(state)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      draw(state)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; state[ &lt;span class=&quot;string&quot;&gt;&#39;time&#39;&lt;/span&gt; ]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          race(run_step_of_race(state))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; race(&amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;time&#39;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;car_positions&#39;&lt;/span&gt; : [ &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ]&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面的代码依然把程序的逻辑分成了函数，不过这些函数都是functional的。因为它们有三个症状：&lt;/p&gt;&lt;p&gt;1）它们之间没有共享的变量。 2）函数间通过参数和返回值来传递数据。 3）在函数里没有临时变量。&lt;/p&gt;&lt;p&gt;我们还可以看到，for循环被递归取代了（见race函数）—— 递归是函数式编程中带用到的技术，正如前面所说的，递归的本质就是描述问题是什么。&lt;/p&gt;&lt;center&gt;![](http://coolshell.cn//wp-content/uploads/2013/12/forrest-gump.jpg)&gt;&lt;/center&gt;&lt;h4 id=&quot;pipeline&quot;&gt;Pipeline&lt;/h4&gt;&lt;p&gt;pipeline 管道借鉴于Unix Shell的管道操作——把若干个命令串起来，前面命令的输出成为后面命令的输入，如此完成一个流式计算。（注：管道绝对是一个伟大的发明，他的设哲学就是KISS – 让每个功能就做一件事，并把这件事做到极致，软件或程序的拼装会变得更为简单和直观。这个设计理念影响非常深远，包括今天的Web Service，云计算，以及大数据的流式计算等等）&lt;/p&gt;&lt;p&gt;比如，我们如下的shell命令：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ps auwwx | awk &amp;apos;&amp;#123;print $2&amp;#125;&amp;apos; | sort -n | xargs echo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果我们抽象成函数式的语言，就像下面这样：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xargs(  echo, sort(n, awk(``&amp;apos;print $2&amp;apos;``, ps(auwwx)))  )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;也可以类似下面这个样子：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pids` `=` `for_each(result, [ps_auwwx, awk_p2, sort_n, xargs_echo])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;好了，让我们来看看函数式编程的Pipeline怎么玩？&lt;/p&gt;&lt;p&gt;我们先来看一个如下的程序，这个程序的process()有三个步骤：&lt;/p&gt;&lt;p&gt;1）找出偶数。 2）乘以3 3）转成字符串返回&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(num)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# filter out non-evens&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; num % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; ! = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      num = num * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      num = &lt;span class=&quot;string&quot;&gt;&#39;The Number: %s&#39;&lt;/span&gt; % num&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; nums = [ &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; num &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; nums:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; process(num)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# 输出：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# The Number: 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# The Number: 12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# The Number: 18&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# The Number: 24&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# The Number: 30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;我们可以看到，输出的并不够完美，另外，代码阅读上如果没有注释，你也会比较晕。下面，我们来看看函数式的pipeline（第一种方式）应该怎么写？&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;even_filter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; num &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; nums:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; num % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; = = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; num&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;multiply_by_three&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; num &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; nums:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; num * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;convert_to_string&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; num &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; nums:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;The Number: %s&#39;&lt;/span&gt; % num&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; nums = [ &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; pipeline = convert_to_string(multiply_by_three(even_filter(nums)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; num &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; pipeline:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; num&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# 输出：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# The Number: 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# The Number: 12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# The Number: 18&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# The Number: 24&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# The Number: 30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;我们动用了Python的关键字 yield，这个关键字主要是返回一个Generator，yield 是一个类似 return 的关键字，只是这个函数返回的是个Generator-生成器。所谓生成器的意思是，yield返回的是一个可迭代的对象，并没有真正的执行函数。也就是说，只有其返回的迭代对象被真正迭代时，yield函数才会正真的运行，运行到yield语句时就会停住，然后等下一次的迭代。（这个是个比较诡异的关键字）这就是lazy evluation。&lt;/p&gt;&lt;p&gt;好了，根据前面的原则——“&lt;strong&gt;使用Map &amp;amp; Reduce，不要使用循环&lt;/strong&gt;”，那我们用比较纯朴的Map &amp;amp; Reduce吧。&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;even_filter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; filter ( &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: x % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; = = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; , nums)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;multiply_by_three&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; map ( &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: x * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; , nums)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;convert_to_string&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; map ( &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: &lt;span class=&quot;string&quot;&gt;&#39;The Number: %s&#39;&lt;/span&gt; % x,  nums)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; nums = [ &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; pipeline = convert_to_string(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 multiply_by_three(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     even_filter(nums)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; num &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; pipeline:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; num&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;但是他们的代码需要嵌套使用函数，这个有点不爽，如果我们能像下面这个样子就好了（第二种方式）。&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pipeline_func(nums, [even_filter,multiply_by_three,convert_to_string])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;那么，pipeline_func 实现如下：&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pipeline_func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data, fns)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; reduce ( &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; a, x: x(a),fns, data)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;好了，在读过这么多的程序后，你可以回头看一下这篇文章的开头对函数式编程的描述，可能你就更有感觉了。&lt;/p&gt;&lt;p&gt;最后，&lt;strong&gt;我希望这篇浅显易懂的文章能让你感受到函数式编程的思想，就像OO编程，泛型编程，过程式编程一样，我们不用太纠结是不是我们的程序就是OO，就是functional的，我们重要的品味其中的味道&lt;/strong&gt;。&lt;/p&gt;&lt;h4 id=&quot;参考&quot;&gt;参考&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Wikipedia: &lt;a href=&quot;http://en.wikipedia.org/wiki/Functional_programming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Functional Programming&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/5226055/truly-understanding-the-difference-between-procedural-and-functional&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;truly understanding the difference between procedural and functional&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://maryrosecook.com/post/a-practical-introduction-to-functional-programming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A practical introduction to functional programming&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/q/23277/211232&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What is the difference between procedural programming and functional programming?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/q/3249863/211232&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Can someone give me examples of functional programming vs imperative/procedural programming?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/q/552336/211232&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OOP vs Functional Programming vs Procedural&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Python – &lt;a href=&quot;http://docs.python.org/2/howto/functional.html#&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Functional Programming HOWTO&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;补充&lt;/strong&gt;：评论中&lt;a href=&quot;http://weibo.com/redraiment&quot; title=&quot;redraiment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;redraiment&lt;/a&gt;的&lt;a href=&quot;http://coolshell.cn/articles/10822.html#comment-1111518&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个评论&lt;/a&gt;大家也可以读一读。&lt;/p&gt;&lt;p&gt;感谢谢网友S142857 提供的shell风格的python pipeline：&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Pipe&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( object )&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( self , func)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         self .func = func&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__ror__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( self , other)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; obj &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; other:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; obj &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt; :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; self .func(obj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; generator()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Pipe&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;even_filter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(num)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; num % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; = = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Pipe&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;multiply_by_three&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(num)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Pipe&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;convert_to_string&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(num)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;The Number: %s&#39;&lt;/span&gt; % num&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Pipe&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(item)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;force&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(sqs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; sqs: &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nums = [ &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;force(nums | even_filter | multiply_by_three | convert_to_string | echo)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;本文转载自&lt;a href=&quot;http://coolshell.cn/articles/10822.html&quot;&gt;酷壳&lt;/a&gt;,作者陈皓. 关于函数式编程作者讲的很详细清楚&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;当我们说起函数式编程来说，我们会看到如下函数式编程的长相：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;函数式编程的三大特性：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;immutable data 不可变数据&lt;/strong&gt;：像Clojure一样，默认上变量是不可变的，如果你要改变变量，你需要把变量copy出去修改。这样一来，可以让你的程序少很多Bug。因为，程序中的状态不好维护，在并发的时候更不好维护。（你可以试想一下如果你的程序有个复杂的状态，当以后别人改你代码的时候，是很容易出bug的，在并行中这样的问题就更多了）&lt;/li&gt;&lt;li&gt;&lt;strong&gt;first class functions&lt;/strong&gt;：这个技术可以让你的函数就像变量一样来使用。也就是说，你的函数可以像变量一样被创建，修改，并当成变量一样传递，返回或是在函数中嵌套函数。这个有点像Javascript的Prototype（参看&lt;a href=&quot;http://coolshell.cn/articles/6668.html&quot; title=&quot;再谈javascript面向对象编程&quot;&gt;Javascript的面向对象编程&lt;/a&gt;）&lt;/li&gt;&lt;li&gt;&lt;strong&gt;尾递归优化&lt;/strong&gt;：我们知道递归的害处，那就是如果递归很深的话，stack受不了，并会导致性能大幅度下降。所以，我们使用尾递归优化技术——每次递归时都会重用stack，这样一来能够提升性能，当然，这需要语言或编译器的支持。Python就不支持。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;函数式编程的几个技术&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;map &amp;amp; reduce&lt;/strong&gt; ：这个技术不用多说了，函数式编程最常见的技术就是对一个集合做Map和Reduce操作。这比起过程式的语言来说，在代码上要更容易阅读。（传统过程式的语言需要使用for/while循环，然后在各种变量中把数据倒过来倒过去的）这个很像C++中的STL中的foreach，find_if，count_if之流的函数的玩法。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;pipeline&lt;/strong&gt;：这个技术的意思是，把函数实例成一个一个的action，然后，把一组action放到一个数组或是列表中，然后把数据传给这个action list，数据就像一个pipeline一样顺序地被各个函数所操作，最终得到我们想要的结果。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;recursing 递归&lt;/strong&gt; ：递归最大的好处就简化代码，他可以把一个复杂的问题用很简单的代码描述出来。注意：递归的精髓是描述问题，而这正是函数式编程的精髓。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;currying&lt;/strong&gt;：把一个函数的多个参数分解成多个函数， 然后把函数多层封装起来，每层函数都返回一个函数去接收下一个参数这样，可以简化函数的多个参数。在C++中，这个很像STL中的bind_1st或是bind2nd。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;higher order function 高阶函数&lt;/strong&gt;：所谓高阶函数就是函数当参数，把传入的函数做一个封装，然后返回这个封装函数。现象上就是函数传进传出，就像面向对象对象满天飞一样。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;还有函数式的一些好处&lt;/p&gt;&lt;ul&gt;&lt;li&gt;**parallelization 并行：**所谓并行的意思就是在并行环境下，各个线程之间不需要同步或互斥。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;lazy evaluation 惰性求值&lt;/strong&gt;：这个需要编译器的支持。表达式不在它被绑定到变量之后就立即求值，而是在该值被取用的时候求值，也就是说，语句如_x:=expression;_ (把一个表达式的结果赋值给一个变量)明显的调用这个表达式被计算并把结果放置到 &lt;em&gt;x&lt;/em&gt; 中，但是先不管实际在 &lt;em&gt;x&lt;/em&gt; 中的是什么，直到通过后面的表达式中到 &lt;em&gt;x&lt;/em&gt; 的引用而有了对它的值的需求的时候，而后面表达式自身的求值也可以被延迟，最终为了生成让外界看到的某个符号而计算这个快速增长的依赖树。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;determinism 确定性&lt;/strong&gt;：所谓确定性的意思就是像数学那样 f(x) = y ，这个函数无论在什么场景下，都会得到同样的结果，这个我们称之为函数的确定性。而不是像程序中的很多函数那样，同一个参数，却会在不同的场景下计算出不同的结果。所谓不同的场景的意思就是我们的函数会根据一些运行中的状态信息的不同而发生变化。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://metideas.com/blog/categories/Python/"/>
    
    
      <category term="python,编程思想" scheme="http://metideas.com/blog/tags/python-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Core-Python-Programming</title>
    <link href="http://metideas.com/blog/2016/06/03/Core-Python-Programming/"/>
    <id>http://metideas.com/blog/2016/06/03/Core-Python-Programming/</id>
    <published>2016-06-03T20:44:01.000Z</published>
    <updated>2016-06-05T02:37:11.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;中英对照表&quot;&gt;中英对照表&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align:center&quot;&gt;英文&lt;/th&gt;&lt;th style=&quot;text-align:center&quot;&gt;中文&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align:center&quot;&gt;colon&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;冒号&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align:center&quot;&gt;wrap&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;封装&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align:center&quot;&gt;assertions&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;断言&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align:center&quot;&gt;statement&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;语句&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;h3 id=&quot;ch10-异常处理&quot;&gt;ch10 异常处理&lt;/h3&gt;&lt;h4 id=&quot;使用异常的理由&quot;&gt;使用异常的理由&lt;/h4&gt;&lt;blockquote&gt;&lt;p&gt;在应用层处理错误的能力近来变得更为重要, 用户已不再是应用程序的的唯一的直接运行者.&lt;br&gt;随着互联网和网上电子商业应用越来越普及, web 服务器将成为应用软件的主要客户. 这意味着应用 程序再也不能只是直接的失败或崩溃, 因为如果这样, 系统错误导致浏览器的错误, 这反过来又 会让用户沮丧. 失去眼球意味着失去广告收入和和潜在的大量无可挽回的生意.&lt;/p&gt;&lt;p&gt;如果错误的确发生了, 它们一般都归因于用户输入的数据无效. 运行环境必须足够强健,来处 理应用级别的错误,并提供用户级别的错误信息.就服务器而言,这必须转化为一个&amp;quot;非错误&amp;quot; . 因为 应用必须要成功的完成, 即使所做的不过是返回一个错误的信息, 向用户是提供一个有效的超文本 标记语言(HTML)的网页指明错误.&lt;/p&gt;&lt;p&gt;这种类型的执行错误不应该被允许, 无论情况如何. 随着系统变得更加复杂, 又牵涉到更多的 新手用户, 要采取额外的措施, 确保用户平滑的学到应用经验. 即使面对一个错误, 应用应该成功 的中止, 不至于灾难性的影响其执行环境. Python 异常处理促使成熟和正确的编程.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 id=&quot;try-except-else-finally-的应用和熟悉&quot;&gt;try-except-else-finally 的应用和熟悉&lt;/h4&gt;&lt;p&gt;try:&lt;/p&gt;&lt;p&gt;​	...&lt;/p&gt;&lt;p&gt;except:&lt;/p&gt;&lt;p&gt;​	...&lt;/p&gt;&lt;p&gt;else:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;在try...except块可以有一个else子句，就像if语句，如果在try中没有异常引发，然后else子句就执行！！！&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果在 finally 的语句块内发生了一个异常,你可以创建一个同现有的异常 处理器在同一个(外)层次的异常处理器来处理它.这样,从本质上来说,就可以同时处理在原始的 try 语句块和 finally 语句块中发生的错误.这种方法唯一的问题是,当 finally 语句块中的确发生异常 时,你会丢失原来异常的上下文信息,除非你在某个地方保存了它.&lt;/p&gt;&lt;p&gt;如果 finally 中的代码引发了另一个异常或由于 return,break,continue 语 法而终止,原来的异常将丢失而且无法重新引发.&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    try_suite&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; Exception1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    suite_for_Exception1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; (Exception2, Exception3, Exception4):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    suite_for_Exceptions_2_3_and_4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; Exception5, Argument5:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    suite_for_Exception5_plus_argument&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; (Exception6, Exception7), Argument67:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    suite_for_Exceptions6_and_7_plus_argument&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    suite_for_all_other_exceptions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    no_exceptions_detected_suite&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    always_execute_suite&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&quot;wtih-语句-待理解&quot;&gt;wtih 语句[待理解]&lt;/h4&gt;&lt;p&gt;&lt;code&gt;应用场景:&lt;/code&gt;类似try-except-finally , with语句也是用来简化代码的,这与用try-except和try-finally 所想达到的目的前后呼应.try-except 和 try-finally 的一种特定的配合用法是保证共享的资源的 唯一分配,并在任务结束的时候释放它.比如文件(数据,日志,数据库等等),线程资源,简单同步,数 据库连接,等等. with 语句的目标就是应用在这种场景.&lt;/p&gt;&lt;h4 id=&quot;触发异常&quot;&gt;触发异常&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;上述是由解释器产生的异常&lt;/li&gt;&lt;li&gt;执行期间的错误, 比如在编写 API 时候希望能够在遇到错误输入时触发异常 → 使用raise 语句&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;raise [SomeException [, args [, traceback]]]&lt;br&gt;第一个参数,SomeExcpetion,是触发异常的名字.如果有,它必须是一个字符串,类或实例(详见下文).如果有其他参数(arg 或 traceback),就必须提供 SomeExcpetion. 第二个符号为可选的 args(比如参数,值),来传给异常. 最后一项参数,traceback,同样是可选的(实际上很少用它),如果有的话,则是当异常触发时新生成的一个用于异常-正常化(exception—normally)的追踪(traceback)对象.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 id=&quot;assertation&quot;&gt;assertation&lt;/h4&gt;&lt;p&gt;断言语句可以认为是 (raise-if-not)语句&lt;/p&gt;&lt;p&gt;&lt;code&gt;效果&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;语法&lt;/code&gt; assert expression[,&amp;amp;nbsp arguments]&lt;/p&gt;&lt;p&gt;&lt;code&gt;使用场景&lt;/code&gt;&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;One does not equal zero silly!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; AssertionError, args:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;%s: %s&#39;&lt;/span&gt; % (args.__class__.__name__, args)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#输出 AssertionError: One does not equal zero silly!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&quot;标准异常&quot;&gt;标准异常&lt;/h4&gt;&lt;h4 id=&quot;sys-module-下的异常&quot;&gt;sys module 下的异常&lt;/h4&gt;&lt;p&gt;&lt;code&gt;sys.exc_info()&lt;/code&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;exc_type: exception class object&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;exc_value: (this) exception class instance object [same with exception argument]&lt;/li&gt;&lt;li&gt;exc_traceback: traceback object&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;q-a&quot;&gt;Q&amp;amp;A&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;哪些因素会引发异常: the interpreter &amp;amp; the program&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;which could raise exceptions while running within the interactive interpreter(交互解释器): user &amp;amp; the interpreter &amp;amp; the program&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;用来引发异常的关键字有哪些? (Name the keyword(s) which is (are) used to raise exceptions.)&lt;/p&gt;&lt;p&gt;&lt;code&gt;try except finally raise&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;剩余问题参考&lt;a href=&quot;http://www.voidcn.com/blog/birdzb/article/p-4912342.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;该篇文章&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&quot;chapter11-函数和函数式编程&quot;&gt;Chapter11 函数和函数式编程&lt;/h3&gt;&lt;h4 id=&quot;type-of-object-that-python-returns&quot;&gt;Type of Object That Python Returns&lt;/h4&gt;&lt;p&gt;overloading is not a feature of Python&lt;/p&gt;&lt;p&gt;&lt;code&gt;效果&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;语法&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;使用场景&lt;/code&gt;&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;中英对照表&quot;&gt;中英对照表&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align:center&quot;&gt;英文&lt;/th&gt;&lt;th style=&quot;text-align:center&quot;&gt;中文&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align:center&quot;&gt;colon&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;冒号&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align:center&quot;&gt;wrap&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;封装&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align:center&quot;&gt;assertions&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;断言&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align:center&quot;&gt;statement&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;语句&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="Reading" scheme="http://metideas.com/blog/categories/Reading/"/>
    
    
      <category term="Python" scheme="http://metideas.com/blog/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Pycharm 设置与使用记录</title>
    <link href="http://metideas.com/blog/2016/06/01/python-pycharm/"/>
    <id>http://metideas.com/blog/2016/06/01/python-pycharm/</id>
    <published>2016-06-01T04:00:00.000Z</published>
    <updated>2016-06-03T20:32:19.000Z</updated>
    
    <content type="html">&lt;p&gt;为学习 Python 而使用的第一款 Jetbrain 家产品, 由此也入了他家的坑, 零零散散的产品都装上了,有必要记录一下一些个性化的设置和使用习惯.&lt;/p&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;center&gt;`关闭Pycharm拼写检查`&lt;/center&gt;每次出来都发现有一些自定义变量会被软件自动检测为拼写错误,挺烦人的,就想到了关闭拼写检测. 参考了[资料][1]后发现,系统里的搜索蛮好用的,直接的 perferences 里搜索 spelling, 所有和 spelling 相关的选项都跳出来了.大部分的设置问题都可以用搜索解决.&lt;p&gt;想来是思维问题, 转变观点,搜索总比看整篇的教程来的高效啊&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;为学习 Python 而使用的第一款 Jetbrain 家产品, 由此也入了他家的坑, 零零散散的产品都装上了,有必要记录一下一些个性化的设置和使用习惯.&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://metideas.com/blog/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Recorded Event ①</title>
    <link href="http://metideas.com/blog/2016/05/09/record/"/>
    <id>http://metideas.com/blog/2016/05/09/record/</id>
    <published>2016-05-09T04:00:00.000Z</published>
    <updated>2016-06-03T21:08:57.000Z</updated>
    
    <content type="html">&lt;center&gt;![雷洋事件](http://www.cwzg.cn/uploadfile/2016/0512/20160512021212984.png)&lt;/center&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;blockquote&gt;&lt;p&gt;随时间流逝, 留下痕迹 May-09-2016&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;起始&quot;&gt;起始&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/53df2517jw1f3ph7wyhv5j20c81u747c.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw1024/53df2517jw1f3ph7x6q1kj20hs2c7tgo.jpg&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw1024/53df2517jw1f3ph7xi8g4j20de0hcjtq.jpg&quot; alt=&quot;3&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;评论&quot;&gt;评论&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;双方论述出现了矛盾; 抓嫖把人弄死了, 警方都是重大责任方,现在好像出一个通告就撇清了责任了. 以过往的经验即便警方通告是事实也无法想象家属能够通过法律途径获得赔偿; 这则新闻背后的动因是什么不清楚, 删帖和封话题是事实; 其实激起的类似群体的是同理心; 这他妈是生命啊 !&lt;/li&gt;&lt;li&gt;我要是被公安抓了，一定不反抗，什么也不说，等待律师。这么处理，对吗？那万一歹徒假冒公安怎么办呢？&lt;/li&gt;&lt;li&gt;回复@springbank:剪辑的，PS的。。。其实我根本不想给这些警察说话，但是雷家人连嫖娼都不承认，足以让我对他们的话都不采信。//@springbank:拿记录仪就清了。//@海豚佩佩:嗯，家属100%说谎了//@一難得有情一:家属说21点出门接人，警方20时就抓到人了，总有一方胡说&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;后续&quot;&gt;后续&lt;/h3&gt;&lt;h3 id=&quot;analysis-solution&quot;&gt;Analysis &amp;amp; Solution&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;[兔主席 weibo][1]&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;对雷洋事件我的看法：&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;对这个事件，首先抓住我眼球的是“人大硕士”这个标签。我开始以为雷洋是在读学生。后来一查发现他多年前就毕业了。这说明媒体在有意识地炒作他的身份（构成某种意义上的sensationalism）——人大硕士这个身份被认为是雷洋最引人注目、最值得被关注的标签，高于他所有其他的身份认同，包括后来的工作。是他的身份引发了人们对事件的关注。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;然后再看这个事情的本身。初期，对他背景的一些烘托描述，比如高学历、适逢结婚纪念日、小孩满月等等，似乎让人们觉得他不应当或者不太可能在道德上存在瑕疵，去从事“嫖娼”的行为。潜台词是他肯定是被冤枉的。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;我认为这种烘托不但无意义，不重要，而且很危险：一旦被揭示他确实存在寻求性服务的行为，除了使其本人“道德破产”、给家庭带来进一步的伤害外，对于我们理解本案基本上没有任何帮助。比如这完全不能解释他为什么在被执法人员发现后，到抵达医院身亡的一段：他的不道德的行为和他在执法人员手下丧命的结果之间，完全不应该有因果关系（“嫖娼罪不该死”）。我认为对他背景、动机、道德追准的烘托、诠释和推演是不成熟、幼稚，也不是对死者和家属的尊重，而且是对这样值得关注的公众事件的不得要领。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;另外，可以预见会有一批比较liberal或者道德相对论的人士出来为这种寻求性服务的行为（如有）进行某种意义上的开脱和洗白。所以“道德破产”这个论述在他们看来也是不成立的。这只是一个普通人进行的一次性交易行为。而性交易是世界上最老的行业。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;上面的讨论，“人大硕士”、“是否嫖娼”，全部都是偏题。如果媒体在报道中，为渲染这些因素发挥了角色，那我认为都是不专业、避重就轻、sensationalism的表现。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;这个案子非常简单，就是一个执法问题。一个程序正义的问题。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;这个案子甚至不一定和体制有完全的必然的联系，泛政治化不一定是负责任的。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;我觉得，从性质上看，这个案子和美国白人警察为一些无故小事（比如不听警察指令站住）开枪击毙街头的黑人小青年一样。是每日执法方面存在的严重问题。背后有深刻的社会根源（政治体制是其中的一个维度或方面）。在美国标榜人权的民主国家尚且常有这样的事情存在，在中国就何况了。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;但这种事情可能是经常出现的。在美国，白人警察欺负有色人种特别是黑人可能每日在全国范围发生无数起，只不过是没有到当事人死亡的地步，事情没有发酵，没有闹起来。在中国也一样，可能每天都有无数类似的事情发生。但并没有“人大硕士”这样有一定话语影响力的城市中产甚至上层中产成为受害者并且丢掉性命。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;在美国，如果一个黑人小孩失踪了，很可能根本不是新闻。但如果一个漂亮的白人女孩失踪了，这就是newsworthy，会成为相当比例大众所关注、最终的新闻对象。因此，当事人的身份认同对于新闻的潜在关注度至关重要。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;所以，回到这次事件，“人大硕士”这个标签，以及他所暗示的和“嫖娼”这种“不道德违法行为”之间的差异或者不协调，是引起本次社会关注的核心。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;（当然有人会指出为什么北大教授调戏服务生就可信，人大硕士嫖娼就不可能。这背后又有阶层的原因。北大教授是体制精英，被认为可能是腐败的。人大硕士看上去像年轻人，感觉是奋斗的中产，能够博得更多人的同情。）&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;对于这次事件，我们必然要关注雷洋之死背后的不公并寻求解释和解决的方案。但同时，也要关注或至少感叹，为什么只有“人大硕士”这样标签的出现，才能让我们唤起对雷洋的同情，让我们唤起对与雷洋一样，但学历没有他高的人的同情，以及唤起我们对这样不公，这样恶劣的执法的关注。 [1]:[http://m.weibo.cn/1221171697/3974091150581306]&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;评论文章摘录&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://www.cwzg.cn/html/2016/guanfengchasu_0512/28087.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;雷洋事件：必须面对最大的民意&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;点评: 讨厌标题&lt;/p&gt;&lt;/blockquote&gt;</content>
    
    <summary type="html">
    
      &lt;center&gt;![雷洋事件](http://www.cwzg.cn/uploadfile/2016/0512/20160512021212984.png)&lt;/center&gt;
    
    </summary>
    
    
      <category term="record" scheme="http://metideas.com/blog/tags/record/"/>
    
  </entry>
  
  <entry>
    <title>Claude Shannon, The father of the information age, Turns 1100100</title>
    <link href="http://metideas.com/blog/2016/04/30/claude-shannon/"/>
    <id>http://metideas.com/blog/2016/04/30/claude-shannon/</id>
    <published>2016-04-30T18:43:55.000Z</published>
    <updated>2016-06-03T19:12:35.000Z</updated>
    
    <content type="html">&lt;p&gt;12 年前, Caltech的数学家, 工程师--Robert McEliece 获得了信息理论领域的最高奖--Claude E.Shannon奖. 他在芝加哥举办的国际研讨会上发表的获奖感言中探讨了2001去世的香农. McEliece 想象着几千年后的未来的某一天, 166版的银河百科全书（Encyclopedia Galactica)--一本最初由阿西莫夫(Isaac Asimov)构想出来的科幻简明手册--会包含以下的传记内容:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;**Claude Shannon:**公元1916年生于地球(Sol Ⅲ). 香农被视为信息时代之父, 他在公元1949年创建了通道容量 (chennel capacity)的概念. 接下来的几十年里, 数学家和工程师们设计出了切实可行的办法, 以香农极限百事之一的数据速率范围内可靠地通信.&lt;/p&gt;&lt;/blockquote&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;p&gt;&lt;img src=&quot;http://www.newyorker.com/wp-content/uploads/2016/04/Roberts-Claude-Shannon-782.jpg&quot; alt=&quot;A hundred years after his birth, Claude Shannon’s fingerprints are on every electronic device we own.&quot;&gt;&lt;/p&gt;&lt;p&gt;As is sometimes the case with encyclopedias, the crisply worded entry didn’t quite do justice to its subject’s legacy. That humdrum phrase—“channel capacity”—refers to the maximum rate at which data can travel through a given medium without losing integrity. The Shannon limit, as it came to be known, is different for telephone wires than for fibre-optic cables, and, like absolute zero or the speed of light, it is devilishly hard to reach in the real world. But providing a means to compute this limit was perhaps the lesser of Shannon’s great breakthroughs. First and foremost, he introduced the notion that information could be quantified at all. In “A Mathematical Theory of Communication,” his legendary paper from 1948, Shannon proposed that data should be measured in bits—discrete values of zero or one. (He gave credit for the word’s invention to his colleague John Tukey, at what was then Bell Telephone Laboratories, who coined it as a contraction of the phrase “binary digit.”)&lt;/p&gt;&lt;p&gt;“It would be cheesy to compare him to Einstein,” James Gleick, the author of “The Information,” told me, before submitting to temptation. “Einstein looms large, and rightly so. But we’re not living in the relativity age, we’re living in the information age. It’s Shannon whose fingerprints are on every electronic device we own, every computer screen we gaze into, every means of digital communication. He’s one of these people who so transform the world that, after the transformation, the old world is forgotten.” That old world, Gleick said, treated information as “vague and unimportant,” as something to be relegated to “an information desk at the library.” The new world, Shannon’s world, exalted information; information was everywhere. “He created a whole field from scratch, from the brow of Zeus,” David Forney, an electrical engineer and adjunct professor at M.I.T., said. Almost immediately, the bit became a sensation: scientists tried to measure birdsong with bits, and human speech, and nerve impulses. (In 1956, Shannon wrote a disapproving editorial about this phenomenon, called “The Bandwagon.”)&lt;/p&gt;&lt;p&gt;Although Shannon worked largely with analog technology, he also has some claim as the father of the digital age, whose ancestral ideas date back not only to his 1948 paper but also to his master’s thesis, published a decade earlier. The thesis melded George Boole’s nineteenth-century Boolean algebra (based on the variables true and false, denoted by the binary one and zero) with the relays and switches of electronic circuitry. The computer scientist and sometime historian Herman Goldstine hyperbolically deemed it “one of the most important master’s theses ever written,” arguing that “it changed circuit design from an art to a science.” Neil Sloane, a retired Bell Labs mathematician as well as the co-editor of Shannon’s collected papers and the founder of the On-Line Encyclopedia of Integer Sequences, agreed. “Of course, Shannon’s main work was in communication theory, without which we would still be waiting for telegrams,” Sloane said. But circuit design, he added, seemed to be Shannon’s great love. “He loved little machines. He loved the tinkering.”&lt;/p&gt;&lt;p&gt;For instance, Shannon built a machine that did arithmetic with Roman numerals, naming it THROBAC I, for Thrifty Roman-Numeral Backward-Looking Computer. He built a flame-throwing trumpet and a rocket-powered Frisbee. He built a chess-playing automaton that, after its opponent moved, made witty remarks. Inspired by the late artificial-intelligence pioneer Marvin Minsky, he designed what was dubbed the Ultimate Machine: flick the switch to “On” and a box opens up; out comes a mechanical hand, which flicks the switch back to “Off” and retreats inside the box. Shannon’s home, in Winchester, Massachusetts (Entropy House, he called it), was full of his gizmos, and his garage contained at least thirty idiosyncratic unicycles—one without pedals, one with a square tire, and a particularly confounding unicycle built for two. Among the questions he sought to answer was, What’s the smallest unicycle anybody could ride? “He had a few that were a little too small,” Elwyn Berlekamp, a professor emeritus of mathematics at Berkeley and a co-author of Shannon’s last paper, told me. Shannon sat on Berlekamp’s thesis committee at M.I.T., and in return he asked Berlekamp to teach him how to juggle with four balls. “He claimed his hands were too small, which was true—they were smaller than most people’s—so he had trouble holding the four balls to start,” Berlekamp said. But Shannon succeeded in mastering the technique, and he pursued further investigations with his Jugglometer. “He was hacking reality,” the digital philosopher Amber Case said.&lt;/p&gt;&lt;p&gt;By 1960, however, like the hand of that sly machine, Shannon had retreated. He no longer participated much in the field that he had created, publishing only rarely. Yet he still tinkered, in the time he might have spent cultivating the big reputation that scientists of his stature tend to seek. In 1973, the Institute of Electrical and Electronics Engineers christened the Shannon Award by bestowing it on the man himself, at the International Symposium on Information Theory in Ashkelon, Israel. Shannon had a bad case of nerves, but he pulled himself together and delivered a fine lecture on feedback, then dropped off the scene again. In 1985, at the International Symposium in Brighton, England, the Shannon Award went to the University of Southern California’s Solomon Golomb. As the story goes, Golomb began his lecture by recounting a terrifying nightmare from the night before: he’d dreamed that he was about deliver his presentation, and who should turn up in the front row but Claude Shannon. And then, there before Golomb in the flesh, and in the front row, was Shannon. His reappearance (including a bit of juggling at the banquet) was the talk of the symposium, but he never attended again.&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;12 年前, Caltech的数学家, 工程师--Robert McEliece 获得了信息理论领域的最高奖--Claude E.Shannon奖. 他在芝加哥举办的国际研讨会上发表的获奖感言中探讨了2001去世的香农. McEliece 想象着几千年后的未来的某一天, 166版的银河百科全书（Encyclopedia Galactica)--一本最初由阿西莫夫(Isaac Asimov)构想出来的科幻简明手册--会包含以下的传记内容:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;**Claude Shannon:**公元1916年生于地球(Sol Ⅲ). 香农被视为信息时代之父, 他在公元1949年创建了通道容量 (chennel capacity)的概念. 接下来的几十年里, 数学家和工程师们设计出了切实可行的办法, 以香农极限百事之一的数据速率范围内可靠地通信.&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Droplets" scheme="http://metideas.com/blog/categories/Droplets/"/>
    
      <category term="Story" scheme="http://metideas.com/blog/categories/Droplets/Story/"/>
    
    
      <category term="people" scheme="http://metideas.com/blog/tags/people/"/>
    
  </entry>
  
  <entry>
    <title>Days Old</title>
    <link href="http://metideas.com/blog/2016/04/29/daysold/"/>
    <id>http://metideas.com/blog/2016/04/29/daysold/</id>
    <published>2016-04-29T20:05:49.000Z</published>
    <updated>2016-06-03T19:12:35.000Z</updated>
    
    <content type="html">&lt;p&gt;This problem is the focus of the How To Solve Problems Lesson (after Unit 2). Example: if you were born on 29 June 2012, and todays date is 30 June 2012 you are 1 day old. The procedure should output 1. Hints A non-leap year is 365 days. A leap year is 366 days. See http://en.wikipedia.org/wiki/Leap_year#Algorithm for rules on leap years. If you know how many days it is from 1 Jan until a certain date, you also know how many days there are left from that date until 31 Dec. You may want to define some helper procedures. For example, a procedure that determines if a year is a leap year. If you&#39;ve already finished Unit 3 and learned about lists in Python, you may want to use this definition of a list that maps month numbers to the number of days in the month: daysOfMonths = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]&lt;/p&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;leap_year&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(y)&lt;/span&gt;:&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;#判断是否是闰年&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (y % &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; y % &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; y % &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;days_in_month&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(y, m)&lt;/span&gt;:&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;#判断每个月都有几天&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; m &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; m &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; leap_year(y):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;28&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;days_this_year&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(year)&lt;/span&gt;:&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;#判断今年共几天&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; leap_year(year):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;366&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;365&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;days_passed&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(year, month, day)&lt;/span&gt;:&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;#判断今年过了几天&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     m = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     days = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; m &amp;lt; month:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         days += days_in_month(year, m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         m += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; days + day&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;daysBetweenDates&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(year1, month1, day1, year2, month2, day2)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;##&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;# Your code here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;##&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; year1 == year2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; days_passed(year2, month2, day2) - days_passed(year1, month1, day1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         sum1 = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         y1 = year1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; y1 &amp;lt; year2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             sum1 += days_this_year(y1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             y1 += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sum1-days_passed(year1,month1,day1)+days_passed(year2,month2,day2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;This problem is the focus of the How To Solve Problems Lesson (after Unit 2). Example: if you were born on 29 June 2012, and todays date is 30 June 2012 you are 1 day old. The procedure should output 1. Hints A non-leap year is 365 days. A leap year is 366 days. See http://en.wikipedia.org/wiki/Leap_year#Algorithm for rules on leap years. If you know how many days it is from 1 Jan until a certain date, you also know how many days there are left from that date until 31 Dec. You may want to define some helper procedures. For example, a procedure that determines if a year is a leap year. If you&#39;ve already finished Unit 3 and learned about lists in Python, you may want to use this definition of a list that maps month numbers to the number of days in the month: daysOfMonths = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]&lt;/p&gt;
    
    </summary>
    
      <category term="Droplets" scheme="http://metideas.com/blog/categories/Droplets/"/>
    
      <category term="Code" scheme="http://metideas.com/blog/categories/Droplets/Code/"/>
    
    
  </entry>
  
  <entry>
    <title>农业工业化</title>
    <link href="http://metideas.com/blog/2016/01/23/%E5%86%9C%E4%B8%9A%E5%B7%A5%E4%B8%9A%E5%8C%96/"/>
    <id>http://metideas.com/blog/2016/01/23/农业工业化/</id>
    <published>2016-01-23T05:00:00.000Z</published>
    <updated>2016-06-03T19:12:35.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;&lt;p&gt;写一个新的系列，取个名字叫 Droplet, 记录生活中涉及到关于机会的思考。商机如水滴，涓滴成河的时候，希望有一天不符我们这个伟大的时代&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;说实话，最佳的创造财富的机会存在于落差，或者说不同商业世界的天然代差和壁垒。有意思的是，中国社会发展足够快，而有些东西是所有社会的共性。例如中美人民都爱吃肉。例如肉类消费的趋势必然是工业化和标准化。杀猪老汉的嚯嚯磨刀声和奶奶吆喝着让爸爸帮忙杀鸡的吴侬最终还是会消失在中国社会的现代化、城市化和资本化中。资本就是一条嗅着机会的狗。&lt;/p&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;缘起&quot;&gt;缘起&lt;/h2&gt;&lt;p&gt;来源于一则微博&lt;/p&gt;&lt;center&gt;&lt;iframe frameborder=&quot;0&quot; width=&quot;640&quot; height=&quot;498&quot; src=&quot;http://v.qq.com/iframe/player.html?vid=k0182d65kv9&amp;tiny=0&amp;auto=0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;center&gt;![](http://ww2.sinaimg.cn/large/7176c9b5gw1f0ahcgucraj20kf0dojv9.jpg)&lt;/center&gt;&lt;p&gt;看完很开心，终于解开了我长久以来的一个困惑。我就奇怪美国人工这么贵，所有的肉制品又都是标准化的，显然不可能用人工去加工。像鸡这样的家禽这么多毛，处理起来好麻烦的呀。这个机器完全符合了我对工业生产在肉禽行业应用的想象。还是得说，人类社会还是要靠工程师扎扎实实推动的呀:laughing:&lt;/p&gt;&lt;h2 id=&quot;跟进&quot;&gt;跟进&lt;/h2&gt;&lt;p&gt;好吧，首先看看这个到底是哪个企业的杰作。视频最后给了hint，一家叫做foodmate corp. 的企业。随手一查，这些新媒体小编业务水平也太差了，明明是尼德兰的企业好吧，foodmate.nl,这nl都被小编吃喽。 &lt;s&gt;好吧，其实德国和荷兰也没差啦，语言地理都靠的够近&lt;/s&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://gyazo.com/4041bd4a3443cef4fa4329c177933f9c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://i.gyazo.com/4041bd4a3443cef4fa4329c177933f9c.png&quot; alt=&quot;https://gyazo.com/4041bd4a3443cef4fa4329c177933f9c&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;果然是职业做鸡的企业，专门生产禽类生产线的公司，竟然成立于2006年，还是让我蛮震惊的。看来许多变革还是undergonging的，human never stopped!&lt;/p&gt;&lt;p&gt;还有&lt;a href=&quot;http://www.foodmate.nl/cn/home-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中文页面&lt;/a&gt;，有意思&lt;/p&gt;&lt;center&gt;[![https://gyazo.com/f10a14fab12464244874b789591bcd4e](https://i.gyazo.com/f10a14fab12464244874b789591bcd4e.png)](https://gyazo.com/f10a14fab12464244874b789591bcd4e)&lt;/center&gt;&lt;p&gt;国内也有类似的企业&lt;a href=&quot;http://www.njmrjx.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;南京明瑞机械&lt;/a&gt;,不过好像生产线完整度和全自动化方面还有空间，但好歹有对标企业了，不错&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://gyazo.com/3bd9b84aecd23548169d5f892513a177&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://i.gyazo.com/3bd9b84aecd23548169d5f892513a177.png&quot; alt=&quot;https://gyazo.com/3bd9b84aecd23548169d5f892513a177&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;青岛九连&quot;&gt;青岛九连&lt;/h3&gt;&lt;p&gt;那么国内到底有没有引进这样的生产线呢？还是家禽处理还处于原始时代呢？让我们看看国内这个领域老大是谁。 google &lt;code&gt;国内 最大 禽类 加工企业&lt;/code&gt;关键词自然指向了一家叫做青岛九连的企业，官网长这样==！&lt;/p&gt;&lt;center&gt;[![https://gyazo.com/2628bc0527689e62c748e003459ff574](https://i.gyazo.com/2628bc0527689e62c748e003459ff574.jpg)](https://gyazo.com/2628bc0527689e62c748e003459ff574)&lt;/center&gt;&lt;blockquote&gt;&lt;p&gt;青岛九联集团股份有限公司位于青岛莱西市，是一个集种禽繁育、肉鸡养殖、饲料生产、善宰冷藏、熟食制品加工、印刷包装、出口贸易为一体的国家大型肉食鸡专业化一条龙生产企业，国家级农业产业化重点龙头企业。目前，青岛九联集团下辖100多个生产企业，总资产30.8亿元，员工10000余人。2014年完成销售收入75亿元，上缴税金4908万元，出口创汇2亿美元。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://baike.baidu.com/subview/5443685/5480047.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度百科&lt;/a&gt;还给了一些其他信息:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;青岛九联集团股份有限公司，是一个集种禽繁育、饲料生产、肉鸡养殖、宰杀冷藏、食品加工、出口贸易于一体的国家大型农业产业化重点龙头企业。现有总资产10亿元，员工1.2万人，下设9个分公司。拥有16座父母代种鸡场，存栏种鸡80万套；年产种蛋1.3亿枚；1座孵化场，年孵化能力1亿只；4座饲料加工厂，年饲料加工能力55万吨；56座现代化肉鸡饲养场，年出栏商品肉鸡8000万只；3座肉鸡宰杀加工厂，年宰杀能力9000万只；4座鸡肉熟食制品厂，年熟食品加工能力4.5万吨；2007年实现销售收入28.5亿元，出口创汇3000万美元。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;显然，上次被编辑可以追溯到2008年了==！ 这资产增速好像有点慢啊，而且从种种新闻报道来看企业貌似蛮看重出口创汇这一条的。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://gyazo.com/c905bec3061da1dd54161203df439c2f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://i.gyazo.com/c905bec3061da1dd54161203df439c2f.png&quot; alt=&quot;https://gyazo.com/c905bec3061da1dd54161203df439c2f&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;企业性质蛮有意思。显然，企业在这几年间已然完成了股份制改革。&lt;/p&gt;&lt;center&gt;[![https://gyazo.com/c25d2e6cd2a479b569e7407079252292](https://i.gyazo.com/c25d2e6cd2a479b569e7407079252292.png)](https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=3&amp;ved=0ahUKEwjbg6_Y1cHKAhWltIMKHeXqAkwQFggrMAI&amp;url=http%3A%2F%2Fwww.most.gov.cn%2Fztzl%2Fqgxskjgzhy%2Fjlcl%2F200410%2FP020041028597629061568.doc&amp;usg=AFQjCNGGT5duYx2_BkTfVTZyAHdJhI30KQ&amp;sig2=Ay2bLbbYHy0EOjZhtqbPxg&amp;bvm=bv.112454388,d.amc&amp;cad=rjt)&lt;/center&gt;&lt;p&gt;然后生产线的自动化水平还有提高空间啊，记得那个页面上写了进口了荷兰和美国的生产线设备，看来就是foodmate家的设备。【&lt;a href=&quot;http://www.qdjiulian.com/moshi.aspx?type=%D4%D7%C9%B1%BC%D3%B9%A4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;详情&lt;/a&gt;】 &lt;a href=&quot;https://gyazo.com/d736001fc599d17393285dc1e5ff9469&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://i.gyazo.com/d736001fc599d17393285dc1e5ff9469.jpg&quot; alt=&quot;https://gyazo.com/d736001fc599d17393285dc1e5ff9469&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;能排到&lt;a href=&quot;http://www.guancha.cn/economy/2014_09_02_263295.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中国制造业500强&lt;/a&gt;的484（2014年）。&lt;a href=&quot;http://m.rensheng2.com/770000/763915.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章给了更多信息&lt;/a&gt;,九连因为喜福事件受到了打击，而其出口肉鸡规模排名第一，超过二到五名之和。而&lt;a href=&quot;http://finance.sina.com.cn/realstock/company/sz002299/nc.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;圣元发展&lt;/a&gt;好像也是这个领域很重要的玩家。这个企业之前在股市里听到过，好象是属于题材股的一支。不得不感慨中国的资本市场是在是太好混了，对于企业也是无穷的机会啊。&lt;/p&gt;&lt;h3 id=&quot;tyson-foods-inc&quot;&gt;Tyson Foods, Inc&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://gyazo.com/a24f8d4e5195f528013a0ad5ba95502c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://i.gyazo.com/a24f8d4e5195f528013a0ad5ba95502c.jpg&quot; alt=&quot;https://gyazo.com/a24f8d4e5195f528013a0ad5ba95502c&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.wikiwand.com/en/Tyson_Foods&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tyson&lt;/a&gt; 又得感慨一句中英文信息熵的差别，当然这和Tyson是美国的公司也有关系。但这差的也太多了，wiki又被封了，这酸爽 再来个百度百科：http://baike.baidu.com/view/2490264.htm &lt;a href=&quot;https://gyazo.com/478f01de3451e2887f4b95a662128b68&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://i.gyazo.com/478f01de3451e2887f4b95a662128b68.png&quot; alt=&quot;https://gyazo.com/478f01de3451e2887f4b95a662128b68&quot;&gt;&lt;/a&gt;注意这个市场的大小。目测是在美国市场为主的地方获得的，而其也在进军中国ing,目测成本上面国内企业还有优势。毕竟连锁的500强那一套不够因地制宜。&lt;/p&gt;&lt;h2 id=&quot;结论&quot;&gt;结论&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;农业大有作为，农业工业化大有前途，在中国&lt;/li&gt;&lt;li&gt;作为一家生产制造业企业，我觉得企业价值是偏低的，如青岛九连这样的，但是在可预见未来，随着中国社会的现代化和中产消费群体的崛起，这个市场空间非常可观。&lt;/li&gt;&lt;li&gt;如果让我预测，这些领域如果没有被国际500强如Tyson这样的企业占领，中国有可能诞生类似的肉类加工的巨头，而且其在新兴市场的市场开拓能力有可能超过传统的500强如Tyson之类的，因为企业的开拓精神和经济环境决定了中国企业更接发展中国家市场的地气。&lt;/li&gt;&lt;li&gt;企业的资本运作和公关运作非常重要。而显然，国内制造业即使是行业领军企业还是处于自然发展阶段，企业的组织形式和竞争力完全还没达到现代企业应有的层次。例如青岛九连，其从村办乡镇企业股份制转型时间并不长，从其业绩来看也属于价值洼地，行业发展前景广阔。如果有聪明的“现代人”杀进去或者进行资本运作，简直就是降维打击。&lt;/li&gt;&lt;li&gt;当我国中产数目超过美国人口，这个市场将是最有机会的市场也是壁垒相对比较坚强的社会（语言文化和政府因素），这其中给实干者提供了极大的机会。&lt;/li&gt;&lt;/ul&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;写一个新的系列，取个名字叫 Droplet, 记录生活中涉及到关于机会的思考。商机如水滴，涓滴成河的时候，希望有一天不符我们这个伟大的时代&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;说实话，最佳的创造财富的机会存在于落差，或者说不同商业世界的天然代差和壁垒。有意思的是，中国社会发展足够快，而有些东西是所有社会的共性。例如中美人民都爱吃肉。例如肉类消费的趋势必然是工业化和标准化。杀猪老汉的嚯嚯磨刀声和奶奶吆喝着让爸爸帮忙杀鸡的吴侬最终还是会消失在中国社会的现代化、城市化和资本化中。资本就是一条嗅着机会的狗。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
